image: python:3.8-buster

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_DEPTH: 1  
  BRANCH_NAME: "${CI_COMMIT_REF_NAME}_temp"              # Name of the branch to modify
  BOT_NAME: "GitLab Runner Bot"              # Bot's name that appears in the commit log
  BOT_EMAIL: "gitlab-runner-bot@example.net" # Bot's email, not important
  COMMIT_MESSAGE: "Commit from runner "      # Part of the commit message


.push_convert: &push_convert |
  lines=$(git diff --cached | wc -l)
  if [ $lines -gt 0 ]; then
    echo "commiting"
    git commit -m 'convert whitelists'
    echo "git push $BRANCH_NAME"
    git push -o ci.skip "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" $BRANCH_NAME
  else
    echo "nothing to commit"
  fi


.push_merge_public: &push_merge_public |
  lines=$(git ls-remote --heads "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" main | wc -l)
  if [ $lines -gt 0 ]; then
    git checkout public
    git pull
    git merge --no-commit --allow-unrelated-histories origin/main --strategy-option theirs
    echo "merge branches"
    for FILENAME in $(cat private_files)
      do  
          for DELETE_FILE in $(find -print | grep $(echo $FILENAME | tr -d '\r')$)
              do
                  echo remove $DELETE_FILE
                  git rm $DELETE_FILE
              done
      done
    git commit -m 'delete private files'
    git push -o ci.skip "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" public
  else
    echo "nothing to commit"
  fi

.push_merge: &push_merge |
  lines=$(git ls-remote --heads "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" $BRANCH_NAME | wc -l)
  if [ $lines -gt 0 ]; then
    git checkout $CI_COMMIT_REF_NAME
    git merge --allow-unrelated-histories origin/$BRANCH_NAME --strategy-option theirs
    echo "merge branches"
    git push -o ci.skip "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" $CI_COMMIT_REF_NAME
  else
    echo "nothing to commit"
  fi


.remove_local: &remove_local |
  lines=$(git branch)
  if [ $(echo $lines | grep -w $BRANCH_NAME | wc -l) -gt 0 ]; then
    git branch -D $BRANCH_NAME
    echo "delete local branch"
  else
    echo "No local branch to delete"
  fi
  
  
.remove_remote: &remove_remote |
  lines=$(git branch -r)
  if [ $(echo $lines | grep -w "origin/$BRANCH_NAME" | wc -l) -gt 0 ]; then
    git push "https://whatever:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" --delete $BRANCH_NAME
    echo "delete remote branch"
  else
    echo "No remote branch to delete"
  fi
  

before_script:
  - pip install -r requirements.txt


stages:    
  - pre_remove     
  - test
  - convert
  - merge
  - post_remove
  - merge_public
  

test_whitelists:
  stage: test
  script:
    - test/test_whitelists.py


convert_whitelists:
  stage: convert
  script:
    - test/update_department.py -d "${MANAGEMENT_API_DOMAIN}" -id "${MANAGEMENT_API_CLIENTID}" -s "${MANAGEMENT_API_SECRET}"
    - misc/convert.py
    - git config --global user.name "${BOT_NAME}"
    - git config --global user.email "${BOT_EMAIL}"
    - git checkout -b $BRANCH_NAME
    - git add whitelists/department
    - git add misc/json
    - *push_convert
    

merge_branch:
  stage: merge
  script:
    - git fetch
    - git config --global user.name "${BOT_NAME}"
    - git config --global user.email "${BOT_EMAIL}"
    - *push_merge


remove_branch_pre:
  stage: pre_remove
  script:
    - git config --global user.name "${BOT_NAME}"
    - git config --global user.email "${BOT_EMAIL}"
    - *remove_local
    - *remove_remote
  

remove_branch_post:
  stage: post_remove
  script:
    - git config --global user.name "${BOT_NAME}"
    - git config --global user.email "${BOT_EMAIL}"
    - *remove_local
    - *remove_remote

merge_public_branch:
  stage: merge_public
  only: 
    - main
  script:
    - git config --global user.name "${BOT_NAME}"
    - git config --global user.email "${BOT_EMAIL}"
    - *push_merge_public